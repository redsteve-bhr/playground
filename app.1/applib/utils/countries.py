# -*- coding: utf-8 -*-
#
# Copyright 2011 Grosvenor Technology
#

"""
:mod:`countries` --- Country database 
=====================================

.. versionadded:: 1.5

This module contains a set of countries with information about:

 - Country code
 - Used languages
 - Used locales
 - Used timezones

This module is primarily used by :mod:`applib.gui.appWizard` and its 
:class:`~applib.gui.appWizard.CountryPage`, 
:class:`~applib.gui.appWizard.LanguagePage` and 
:class:`~applib.gui.appWizard.TimezonePage` to configure the terminal. 

The following countries are supported:
        
"""

import sys
_countries = {}

def _createList():
    mod = sys.modules[__name__]
    for e in dir(mod):
        if (e[0] != '_' and e[0].isupper()):
            o = getattr(mod, e)
            if (hasattr(o, 'getCountryCode')):
                _countries[o.getCountryCode()] = o
    
def getAll():
    if (len(_countries) == 0):
        _createList()
    return _countries.values()

def getAllCountryCodes():
    if (len(_countries) == 0):
        _createList()
    return _countries.keys()

def getAllCountryCodesForContinent(continent):
    if (len(_countries) == 0):
        _createList()
    countryCodes = []
    for c in _countries.itervalues():
        if (continent.upper() == c.getContinent().upper()):
            countryCodes.append(c.getCountryCode())
    return countryCodes
    
def getByCountryCode(countryCode):
    if (len(_countries) == 0):
        _createList()
    if (countryCode in _countries):
        return _countries[countryCode]
    return None

def getByLocale(locale):
    if (len(_countries) == 0):
        _createList()
    for c in _countries.itervalues():
        for l in c.getLanguages():
            if (l.getLocale() == locale):
                return c
    return None

def filterCountryCodes(countryCodes, filterCodes):
    filterCodes = [ f.strip().upper() for f in filterCodes ]
    if ('WORLD' in filterCodes):
        return countryCodes
    filteredCodes = set()
    for f in filterCodes:
        if (f in countryCodes):
            filteredCodes.add(f)
        else:
            c = getAllCountryCodesForContinent(f)
            if (c):
                filteredCodes |= frozenset(c)
    return list(filteredCodes)


class _Language():
    
    def __init__(self, name, code, locale):
        self.name = name
        self.code = code
        self.locale = locale
    
    def getName(self):
        return self.name

    def getCode(self):
        return self.code
    
    def getLocale(self):
        return self.locale


class _Timezone():
    
    def __init__(self, name, rule, testData=None):
        self.name = name
        self.rule = rule
        self.testData = testData
    
    def getName(self):
        return self.name
    
    def getRule(self):
        return self.rule

    def getTestData(self):
        return self.testData

_tzWET_tests = ( ('2013-03-31T00:55:00', '2013-03-31T00:55:00+0000 WET'  ),
                 ('2013-03-31T01:05:00', '2013-03-31T02:05:00+0100 WEST' ),
                 ('2013-03-31T06:00:00', '2013-03-31T07:00:00+0100 WEST' ),                 
                 ('2013-10-27T00:55:00', '2013-10-27T01:55:00+0100 WEST' ),                 
                 ('2013-10-27T01:05:00', '2013-10-27T01:05:00+0000 WET'  ),
                 ('2013-10-27T07:00:00', '2013-10-27T07:00:00+0000 WET'  ),
                 # 2014
                 ('2014-03-30T00:55:00', '2014-03-30T00:55:00+0000 WET'  ),
                 ('2014-03-30T01:05:00', '2014-03-30T02:05:00+0100 WEST' ),
                 ('2014-03-30T06:00:00', '2014-03-30T07:00:00+0100 WEST' ),                 
                 ('2014-10-26T00:55:00', '2014-10-26T01:55:00+0100 WEST' ),                 
                 ('2014-10-26T01:05:00', '2014-10-26T01:05:00+0000 WET'  ),
                 ('2014-10-26T07:00:00', '2014-10-26T07:00:00+0000 WET'  ),
                 # 2015
                 ('2015-03-29T00:55:00', '2015-03-29T00:55:00+0000 WET'  ),
                 ('2015-03-29T01:05:00', '2015-03-29T02:05:00+0100 WEST' ),
                 ('2015-03-29T06:00:00', '2015-03-29T07:00:00+0100 WEST' ),                 
                 ('2015-10-25T00:55:00', '2015-10-25T01:55:00+0100 WEST' ),                 
                 ('2015-10-25T01:05:00', '2015-10-25T01:05:00+0000 WET'  ),
                 ('2015-10-25T07:00:00', '2015-10-25T07:00:00+0000 WET'  ),
                 # 2016
                 ('2016-03-27T00:55:00', '2016-03-27T00:55:00+0000 WET'  ),
                 ('2016-03-27T01:05:00', '2016-03-27T02:05:00+0100 WEST' ),
                 ('2016-03-27T06:00:00', '2016-03-27T07:00:00+0100 WEST' ),                 
                 ('2016-10-30T00:55:00', '2016-10-30T01:55:00+0100 WEST' ),                 
                 ('2016-10-30T01:05:00', '2016-10-30T01:05:00+0000 WET'  ),
                 ('2016-10-30T07:00:00', '2016-10-30T07:00:00+0000 WET'  ),
                 # 2017
                 ('2017-03-26T00:55:00', '2017-03-26T00:55:00+0000 WET'  ),
                 ('2017-03-26T01:05:00', '2017-03-26T02:05:00+0100 WEST' ),
                 ('2017-03-26T06:00:00', '2017-03-26T07:00:00+0100 WEST' ),                 
                 ('2017-10-29T00:55:00', '2017-10-29T01:55:00+0100 WEST' ),                 
                 ('2017-10-29T01:05:00', '2017-10-29T01:05:00+0000 WET'  ),
                 ('2017-10-29T07:00:00', '2017-10-29T07:00:00+0000 WET'  ),
                 # 2018
                 ('2018-03-25T00:55:00', '2018-03-25T00:55:00+0000 WET'  ),
                 ('2018-03-25T01:05:00', '2018-03-25T02:05:00+0100 WEST' ),
                 ('2018-03-25T06:00:00', '2018-03-25T07:00:00+0100 WEST' ),                 
                 ('2018-10-28T00:55:00', '2018-10-28T01:55:00+0100 WEST' ),                 
                 ('2018-10-28T01:05:00', '2018-10-28T01:05:00+0000 WET'  ),
                 ('2018-10-28T07:00:00', '2018-10-28T07:00:00+0000 WET'  ),
                 # 2019
                 ('2019-03-31T00:55:00', '2019-03-31T00:55:00+0000 WET'  ),
                 ('2019-03-31T01:05:00', '2019-03-31T02:05:00+0100 WEST' ),
                 ('2019-03-31T06:00:00', '2019-03-31T07:00:00+0100 WEST' ),                 
                 ('2019-10-27T00:55:00', '2019-10-27T01:55:00+0100 WEST' ),                 
                 ('2019-10-27T01:05:00', '2019-10-27T01:05:00+0000 WET'  ),
                 ('2019-10-27T07:00:00', '2019-10-27T07:00:00+0000 WET'  ),
                 # 2020
                 ('2020-03-29T00:55:00', '2020-03-29T00:55:00+0000 WET'  ),
                 ('2020-03-29T01:05:00', '2020-03-29T02:05:00+0100 WEST' ),
                 ('2020-03-29T06:00:00', '2020-03-29T07:00:00+0100 WEST' ),                 
                 ('2020-10-25T00:55:00', '2020-10-25T01:55:00+0100 WEST' ),                 
                 ('2020-10-25T01:05:00', '2020-10-25T01:05:00+0000 WET'  ),
                 ('2020-10-25T07:00:00', '2020-10-25T07:00:00+0000 WET'  ),
                 )

_tzCET_tests = ( ('2013-03-31T00:55:00', '2013-03-31T01:55:00+0100 CET'  ),
                 ('2013-03-31T01:05:00', '2013-03-31T03:05:00+0200 CEST' ),
                 ('2013-03-31T05:00:00', '2013-03-31T07:00:00+0200 CEST' ),                 
                 ('2013-10-27T00:55:00', '2013-10-27T02:55:00+0200 CEST' ),                 
                 ('2013-10-27T01:05:00', '2013-10-27T02:05:00+0100 CET'  ),
                 ('2013-10-27T06:00:00', '2013-10-27T07:00:00+0100 CET'  ),                 
                 # 2014
                 ('2014-03-30T00:55:00', '2014-03-30T01:55:00+0100 CET'  ),
                 ('2014-03-30T01:05:00', '2014-03-30T03:05:00+0200 CEST' ),
                 ('2014-03-30T05:00:00', '2014-03-30T07:00:00+0200 CEST' ),                 
                 ('2014-10-26T00:55:00', '2014-10-26T02:55:00+0200 CEST' ),                 
                 ('2014-10-26T01:05:00', '2014-10-26T02:05:00+0100 CET'  ),
                 ('2014-10-26T06:00:00', '2014-10-26T07:00:00+0100 CET'  ),
                 # 2015
                 ('2015-03-29T00:55:00', '2015-03-29T01:55:00+0100 CET'  ),
                 ('2015-03-29T01:05:00', '2015-03-29T03:05:00+0200 CEST' ),
                 ('2015-03-29T05:00:00', '2015-03-29T07:00:00+0200 CEST' ),                 
                 ('2015-10-25T00:55:00', '2015-10-25T02:55:00+0200 CEST' ),                 
                 ('2015-10-25T01:05:00', '2015-10-25T02:05:00+0100 CET'  ),
                 ('2015-10-25T06:00:00', '2015-10-25T07:00:00+0100 CET'  ),
                 # 2016
                 ('2016-03-27T00:55:00', '2016-03-27T01:55:00+0100 CET'  ),
                 ('2016-03-27T01:05:00', '2016-03-27T03:05:00+0200 CEST' ),
                 ('2016-03-27T05:00:00', '2016-03-27T07:00:00+0200 CEST' ),                 
                 ('2016-10-30T00:55:00', '2016-10-30T02:55:00+0200 CEST' ),                 
                 ('2016-10-30T01:05:00', '2016-10-30T02:05:00+0100 CET'  ),
                 ('2016-10-30T06:00:00', '2016-10-30T07:00:00+0100 CET'  ),
                 # 2017
                 ('2017-03-26T00:55:00', '2017-03-26T01:55:00+0100 CET'  ),
                 ('2017-03-26T01:05:00', '2017-03-26T03:05:00+0200 CEST' ),
                 ('2017-03-26T05:00:00', '2017-03-26T07:00:00+0200 CEST' ),                 
                 ('2017-10-29T00:55:00', '2017-10-29T02:55:00+0200 CEST' ),                 
                 ('2017-10-29T01:05:00', '2017-10-29T02:05:00+0100 CET'  ),
                 ('2017-10-29T06:00:00', '2017-10-29T07:00:00+0100 CET'  ),
                 # 2018
                 ('2018-03-25T00:55:00', '2018-03-25T01:55:00+0100 CET'  ),
                 ('2018-03-25T01:05:00', '2018-03-25T03:05:00+0200 CEST' ),
                 ('2018-03-25T05:00:00', '2018-03-25T07:00:00+0200 CEST' ),                 
                 ('2018-10-28T00:55:00', '2018-10-28T02:55:00+0200 CEST' ),                 
                 ('2018-10-28T01:05:00', '2018-10-28T02:05:00+0100 CET'  ),
                 ('2018-10-28T06:00:00', '2018-10-28T07:00:00+0100 CET'  ),
                 # 2019
                 ('2019-03-31T00:55:00', '2019-03-31T01:55:00+0100 CET'  ),
                 ('2019-03-31T01:05:00', '2019-03-31T03:05:00+0200 CEST' ),
                 ('2019-03-31T05:00:00', '2019-03-31T07:00:00+0200 CEST' ),                 
                 ('2019-10-27T00:55:00', '2019-10-27T02:55:00+0200 CEST' ),                 
                 ('2019-10-27T01:05:00', '2019-10-27T02:05:00+0100 CET'  ),
                 ('2019-10-27T06:00:00', '2019-10-27T07:00:00+0100 CET'  ),
                 # 2020
                 ('2020-03-29T00:55:00', '2020-03-29T01:55:00+0100 CET'  ),
                 ('2020-03-29T01:05:00', '2020-03-29T03:05:00+0200 CEST' ),
                 ('2020-03-29T05:00:00', '2020-03-29T07:00:00+0200 CEST' ),                 
                 ('2020-10-25T00:55:00', '2020-10-25T02:55:00+0200 CEST' ),                 
                 ('2020-10-25T01:05:00', '2020-10-25T02:05:00+0100 CET'  ),
                 ('2020-10-25T06:00:00', '2020-10-25T07:00:00+0100 CET'  ),
                 )

_tzEET_tests = ( ('2013-03-31T00:55:00', '2013-03-31T02:55:00+0200 EET'  ),
                 ('2013-03-31T01:05:00', '2013-03-31T04:05:00+0300 EEST' ),
                 ('2013-03-31T04:00:00', '2013-03-31T07:00:00+0300 EEST' ),                 
                 ('2013-10-27T00:55:00', '2013-10-27T03:55:00+0300 EEST' ),                 
                 ('2013-10-27T01:05:00', '2013-10-27T03:05:00+0200 EET'  ),
                 ('2013-10-27T05:00:00', '2013-10-27T07:00:00+0200 EET'  ),                 
                 # 2014
                 ('2014-03-30T00:55:00', '2014-03-30T02:55:00+0200 EET'  ),
                 ('2014-03-30T01:05:00', '2014-03-30T04:05:00+0300 EEST' ),
                 ('2014-03-30T04:00:00', '2014-03-30T07:00:00+0300 EEST' ),                 
                 ('2014-10-26T00:55:00', '2014-10-26T03:55:00+0300 EEST' ),                 
                 ('2014-10-26T01:05:00', '2014-10-26T03:05:00+0200 EET'  ),
                 ('2014-10-26T05:00:00', '2014-10-26T07:00:00+0200 EET'  ),
                 # 2015
                 ('2015-03-29T00:55:00', '2015-03-29T02:55:00+0200 EET'  ),
                 ('2015-03-29T01:05:00', '2015-03-29T04:05:00+0300 EEST' ),
                 ('2015-03-29T04:00:00', '2015-03-29T07:00:00+0300 EEST' ),                 
                 ('2015-10-25T00:55:00', '2015-10-25T03:55:00+0300 EEST' ),                 
                 ('2015-10-25T01:05:00', '2015-10-25T03:05:00+0200 EET'  ),
                 ('2015-10-25T05:00:00', '2015-10-25T07:00:00+0200 EET'  ),
                 # 2016
                 ('2016-03-27T00:55:00', '2016-03-27T02:55:00+0200 EET'  ),
                 ('2016-03-27T01:05:00', '2016-03-27T04:05:00+0300 EEST' ),
                 ('2016-03-27T04:00:00', '2016-03-27T07:00:00+0300 EEST' ),                 
                 ('2016-10-30T00:55:00', '2016-10-30T03:55:00+0300 EEST' ),                 
                 ('2016-10-30T01:05:00', '2016-10-30T03:05:00+0200 EET'  ),
                 ('2016-10-30T05:00:00', '2016-10-30T07:00:00+0200 EET'  ),
                 # 2017
                 ('2017-03-26T00:55:00', '2017-03-26T02:55:00+0200 EET'  ),
                 ('2017-03-26T01:05:00', '2017-03-26T04:05:00+0300 EEST' ),
                 ('2017-03-26T04:00:00', '2017-03-26T07:00:00+0300 EEST' ),                 
                 ('2017-10-29T00:55:00', '2017-10-29T03:55:00+0300 EEST' ),                 
                 ('2017-10-29T01:05:00', '2017-10-29T03:05:00+0200 EET'  ),
                 ('2017-10-29T05:00:00', '2017-10-29T07:00:00+0200 EET'  ),
                 # 2018
                 ('2018-03-25T00:55:00', '2018-03-25T02:55:00+0200 EET'  ),
                 ('2018-03-25T01:05:00', '2018-03-25T04:05:00+0300 EEST' ),
                 ('2018-03-25T04:00:00', '2018-03-25T07:00:00+0300 EEST' ),                 
                 ('2018-10-28T00:55:00', '2018-10-28T03:55:00+0300 EEST' ),                 
                 ('2018-10-28T01:05:00', '2018-10-28T03:05:00+0200 EET'  ),
                 ('2018-10-28T05:00:00', '2018-10-28T07:00:00+0200 EET'  ),
                 # 2019
                 ('2019-03-31T00:55:00', '2019-03-31T02:55:00+0200 EET'  ),
                 ('2019-03-31T01:05:00', '2019-03-31T04:05:00+0300 EEST' ),
                 ('2019-03-31T04:00:00', '2019-03-31T07:00:00+0300 EEST' ),                 
                 ('2019-10-27T00:55:00', '2019-10-27T03:55:00+0300 EEST' ),                 
                 ('2019-10-27T01:05:00', '2019-10-27T03:05:00+0200 EET'  ),
                 ('2019-10-27T05:00:00', '2019-10-27T07:00:00+0200 EET'  ),
                 # 2020
                 ('2020-03-29T00:55:00', '2020-03-29T02:55:00+0200 EET'  ),
                 ('2020-03-29T01:05:00', '2020-03-29T04:05:00+0300 EEST' ),
                 ('2020-03-29T04:00:00', '2020-03-29T07:00:00+0300 EEST' ),                 
                 ('2020-10-25T00:55:00', '2020-10-25T03:55:00+0300 EEST' ),                 
                 ('2020-10-25T01:05:00', '2020-10-25T03:05:00+0200 EET'  ),
                 ('2020-10-25T05:00:00', '2020-10-25T07:00:00+0200 EET'  ),
                 )

_tzEEFT_tests =( ('2013-03-31T00:55:00', '2013-03-31T03:55:00+0300 EEFT' ),
                 ('2013-03-31T01:05:00', '2013-03-31T04:05:00+0300 EEFT' ),
                 ('2013-03-31T04:00:00', '2013-03-31T07:00:00+0300 EEFT' ),                 
                 ('2013-10-27T00:55:00', '2013-10-27T03:55:00+0300 EEFT' ),                 
                 ('2013-10-27T01:05:00', '2013-10-27T04:05:00+0300 EEFT' ),
                 ('2013-10-27T04:00:00', '2013-10-27T07:00:00+0300 EEFT' ),                 
                 # 2014
                 ('2014-03-30T00:55:00', '2014-03-30T03:55:00+0300 EEFT' ),
                 ('2014-03-30T01:05:00', '2014-03-30T04:05:00+0300 EEFT' ),
                 ('2014-03-30T04:00:00', '2014-03-30T07:00:00+0300 EEFT' ),                 
                 ('2014-10-26T00:55:00', '2014-10-26T03:55:00+0300 EEFT' ),                 
                 ('2014-10-26T01:05:00', '2014-10-26T04:05:00+0300 EEFT' ),
                 ('2014-10-26T04:00:00', '2014-10-26T07:00:00+0300 EEFT' ),
                 # 2015
                 ('2015-03-29T00:55:00', '2015-03-29T03:55:00+0300 EEFT' ),
                 ('2015-03-29T01:05:00', '2015-03-29T04:05:00+0300 EEFT' ),
                 ('2015-03-29T04:00:00', '2015-03-29T07:00:00+0300 EEFT' ),                 
                 ('2015-10-25T00:55:00', '2015-10-25T03:55:00+0300 EEFT' ),                 
                 ('2015-10-25T01:05:00', '2015-10-25T04:05:00+0300 EEFT' ),
                 ('2015-10-25T04:00:00', '2015-10-25T07:00:00+0300 EEFT' ),
                 # 2016
                 ('2016-03-27T00:55:00', '2016-03-27T03:55:00+0300 EEFT' ),
                 ('2016-03-27T01:05:00', '2016-03-27T04:05:00+0300 EEFT' ),
                 ('2016-03-27T04:00:00', '2016-03-27T07:00:00+0300 EEFT' ),                 
                 ('2016-10-30T00:55:00', '2016-10-30T03:55:00+0300 EEFT' ),                 
                 ('2016-10-30T01:05:00', '2016-10-30T04:05:00+0300 EEFT' ),
                 ('2016-10-30T04:00:00', '2016-10-30T07:00:00+0300 EEFT' ),
                 # 2017
                 ('2017-03-26T00:55:00', '2017-03-26T03:55:00+0300 EEFT' ),
                 ('2017-03-26T01:05:00', '2017-03-26T04:05:00+0300 EEFT' ),
                 ('2017-03-26T04:00:00', '2017-03-26T07:00:00+0300 EEFT' ),                 
                 ('2017-10-29T00:55:00', '2017-10-29T03:55:00+0300 EEFT' ),                 
                 ('2017-10-29T01:05:00', '2017-10-29T04:05:00+0300 EEFT' ),
                 ('2017-10-29T04:00:00', '2017-10-29T07:00:00+0300 EEFT' ),
                 # 2018
                 ('2018-03-25T00:55:00', '2018-03-25T03:55:00+0300 EEFT' ),
                 ('2018-03-25T01:05:00', '2018-03-25T04:05:00+0300 EEFT' ),
                 ('2018-03-25T04:00:00', '2018-03-25T07:00:00+0300 EEFT' ),                 
                 ('2018-10-28T00:55:00', '2018-10-28T03:55:00+0300 EEFT' ),                 
                 ('2018-10-28T01:05:00', '2018-10-28T04:05:00+0300 EEFT' ),
                 ('2018-10-28T04:00:00', '2018-10-28T07:00:00+0300 EEFT' ),
                 # 2019
                 ('2019-03-31T00:55:00', '2019-03-31T03:55:00+0300 EEFT' ),
                 ('2019-03-31T01:05:00', '2019-03-31T04:05:00+0300 EEFT' ),
                 ('2019-03-31T04:00:00', '2019-03-31T07:00:00+0300 EEFT' ),                 
                 ('2019-10-27T00:55:00', '2019-10-27T03:55:00+0300 EEFT' ),                 
                 ('2019-10-27T01:05:00', '2019-10-27T04:05:00+0300 EEFT' ),
                 ('2019-10-27T04:00:00', '2019-10-27T07:00:00+0300 EEFT' ),
                 # 2020
                 ('2020-03-29T00:55:00', '2020-03-29T03:55:00+0300 EEFT' ),
                 ('2020-03-29T01:05:00', '2020-03-29T04:05:00+0300 EEFT' ),
                 ('2020-03-29T04:00:00', '2020-03-29T07:00:00+0300 EEFT' ),                 
                 ('2020-10-25T00:55:00', '2020-10-25T03:55:00+0300 EEFT' ),                 
                 ('2020-10-25T01:05:00', '2020-10-25T04:05:00+0300 EEFT' ),
                 ('2020-10-25T04:00:00', '2020-10-25T07:00:00+0300 EEFT' ),
                 )

_tzAST_tests = ( ('2013-03-10T05:55:00', '2013-03-10T01:55:00-0400 AST'),
                 ('2013-03-10T06:05:00', '2013-03-10T03:05:00-0300 ADT'),
                 ('2013-03-10T10:00:00', '2013-03-10T07:00:00-0300 ADT'),
                 ('2013-11-03T04:55:00', '2013-11-03T01:55:00-0300 ADT'),
                 ('2013-11-03T05:05:00', '2013-11-03T01:05:00-0400 AST'), 
                 ('2013-11-03T11:00:00', '2013-11-03T07:00:00-0400 AST'),
                 # 2014
                 ('2014-03-09T05:55:00', '2014-03-09T01:55:00-0400 AST'),
                 ('2014-03-09T06:05:00', '2014-03-09T03:05:00-0300 ADT'),
                 ('2014-03-09T10:00:00', '2014-03-09T07:00:00-0300 ADT'),
                 ('2014-11-02T04:55:00', '2014-11-02T01:55:00-0300 ADT'),
                 ('2014-11-02T05:05:00', '2014-11-02T01:05:00-0400 AST'),                    
                 ('2014-11-02T11:00:00', '2014-11-02T07:00:00-0400 AST'),                    
                 # 2015
                 ('2015-03-08T05:55:00', '2015-03-08T01:55:00-0400 AST'),
                 ('2015-03-08T06:05:00', '2015-03-08T03:05:00-0300 ADT'),
                 ('2015-03-08T10:00:00', '2015-03-08T07:00:00-0300 ADT'),
                 ('2015-11-01T04:55:00', '2015-11-01T01:55:00-0300 ADT'),
                 ('2015-11-01T05:05:00', '2015-11-01T01:05:00-0400 AST'),                    
                 ('2015-11-01T11:00:00', '2015-11-01T07:00:00-0400 AST'),                    
                 # 2016
                 ('2016-03-13T05:55:00', '2016-03-13T01:55:00-0400 AST'),
                 ('2016-03-13T06:05:00', '2016-03-13T03:05:00-0300 ADT'),
                 ('2016-03-13T10:00:00', '2016-03-13T07:00:00-0300 ADT'),
                 ('2016-11-06T04:55:00', '2016-11-06T01:55:00-0300 ADT'),
                 ('2016-11-06T05:05:00', '2016-11-06T01:05:00-0400 AST'),                    
                 ('2016-11-06T11:00:00', '2016-11-06T07:00:00-0400 AST'),                    
                 # 2017
                 ('2017-03-12T05:55:00', '2017-03-12T01:55:00-0400 AST'),
                 ('2017-03-12T06:05:00', '2017-03-12T03:05:00-0300 ADT'),
                 ('2017-03-12T10:00:00', '2017-03-12T07:00:00-0300 ADT'),
                 ('2017-11-05T04:55:00', '2017-11-05T01:55:00-0300 ADT'),
                 ('2017-11-05T05:05:00', '2017-11-05T01:05:00-0400 AST'),                    
                 ('2017-11-05T11:00:00', '2017-11-05T07:00:00-0400 AST'),                    
                 # 2018
                 ('2018-03-11T05:55:00', '2018-03-11T01:55:00-0400 AST'),
                 ('2018-03-11T06:05:00', '2018-03-11T03:05:00-0300 ADT'),
                 ('2018-03-11T10:00:00', '2018-03-11T07:00:00-0300 ADT'),
                 ('2018-11-04T04:55:00', '2018-11-04T01:55:00-0300 ADT'),
                 ('2018-11-04T05:05:00', '2018-11-04T01:05:00-0400 AST'),                    
                 ('2018-11-04T11:00:00', '2018-11-04T07:00:00-0400 AST'),                    
                 # 2019
                 ('2019-03-10T05:55:00', '2019-03-10T01:55:00-0400 AST'),
                 ('2019-03-10T06:05:00', '2019-03-10T03:05:00-0300 ADT'),
                 ('2019-03-10T10:00:00', '2019-03-10T07:00:00-0300 ADT'),
                 ('2019-11-03T04:55:00', '2019-11-03T01:55:00-0300 ADT'),
                 ('2019-11-03T05:05:00', '2019-11-03T01:05:00-0400 AST'),                    
                 ('2019-11-03T11:00:00', '2019-11-03T07:00:00-0400 AST'),                    
                 # 2020
                 ('2020-03-08T05:55:00', '2020-03-08T01:55:00-0400 AST'),
                 ('2020-03-08T06:05:00', '2020-03-08T03:05:00-0300 ADT'),
                 ('2020-03-08T10:00:00', '2020-03-08T07:00:00-0300 ADT'),
                 ('2020-11-01T04:55:00', '2020-11-01T01:55:00-0300 ADT'),
                 ('2020-11-01T05:05:00', '2020-11-01T01:05:00-0400 AST'),                    
                 ('2020-11-01T11:00:00', '2020-11-01T07:00:00-0400 AST'),                    
                 )

_tzEST_tests = ( ('2013-03-10T06:55:00', '2013-03-10T01:55:00-0500 EST'),
                 ('2013-03-10T07:05:00', '2013-03-10T03:05:00-0400 EDT'),
                 ('2013-03-10T10:00:00', '2013-03-10T06:00:00-0400 EDT'),
                 ('2013-11-03T05:55:00', '2013-11-03T01:55:00-0400 EDT'),
                 ('2013-11-03T06:05:00', '2013-11-03T01:05:00-0500 EST'), 
                 ('2013-11-03T10:00:00', '2013-11-03T05:00:00-0500 EST'),
                 # 2014
                 ('2014-03-09T06:55:00', '2014-03-09T01:55:00-0500 EST'),
                 ('2014-03-09T07:05:00', '2014-03-09T03:05:00-0400 EDT'),
                 ('2014-03-09T10:00:00', '2014-03-09T06:00:00-0400 EDT'),
                 ('2014-11-02T05:55:00', '2014-11-02T01:55:00-0400 EDT'),
                 ('2014-11-02T06:05:00', '2014-11-02T01:05:00-0500 EST'),                    
                 ('2014-11-02T10:00:00', '2014-11-02T05:00:00-0500 EST'),                    
                 # 2015
                 ('2015-03-08T06:55:00', '2015-03-08T01:55:00-0500 EST'),
                 ('2015-03-08T07:05:00', '2015-03-08T03:05:00-0400 EDT'),
                 ('2015-03-08T10:00:00', '2015-03-08T06:00:00-0400 EDT'),
                 ('2015-11-01T05:55:00', '2015-11-01T01:55:00-0400 EDT'),
                 ('2015-11-01T06:05:00', '2015-11-01T01:05:00-0500 EST'),                    
                 ('2015-11-01T10:00:00', '2015-11-01T05:00:00-0500 EST'),                    
                 # 2016
                 ('2016-03-13T06:55:00', '2016-03-13T01:55:00-0500 EST'),
                 ('2016-03-13T07:05:00', '2016-03-13T03:05:00-0400 EDT'),
                 ('2016-03-13T10:00:00', '2016-03-13T06:00:00-0400 EDT'),
                 ('2016-11-06T05:55:00', '2016-11-06T01:55:00-0400 EDT'),
                 ('2016-11-06T06:05:00', '2016-11-06T01:05:00-0500 EST'),                    
                 ('2016-11-06T10:00:00', '2016-11-06T05:00:00-0500 EST'),                    
                 # 2017
                 ('2017-03-12T06:55:00', '2017-03-12T01:55:00-0500 EST'),
                 ('2017-03-12T07:05:00', '2017-03-12T03:05:00-0400 EDT'),
                 ('2017-03-12T10:00:00', '2017-03-12T06:00:00-0400 EDT'),
                 ('2017-11-05T05:55:00', '2017-11-05T01:55:00-0400 EDT'),
                 ('2017-11-05T06:05:00', '2017-11-05T01:05:00-0500 EST'),                    
                 ('2017-11-05T10:00:00', '2017-11-05T05:00:00-0500 EST'),                    
                 # 2018
                 ('2018-03-11T06:55:00', '2018-03-11T01:55:00-0500 EST'),
                 ('2018-03-11T07:05:00', '2018-03-11T03:05:00-0400 EDT'),
                 ('2018-03-11T10:00:00', '2018-03-11T06:00:00-0400 EDT'),
                 ('2018-11-04T05:55:00', '2018-11-04T01:55:00-0400 EDT'),
                 ('2018-11-04T06:05:00', '2018-11-04T01:05:00-0500 EST'),                    
                 ('2018-11-04T10:00:00', '2018-11-04T05:00:00-0500 EST'),                    
                 # 2019
                 ('2019-03-10T06:55:00', '2019-03-10T01:55:00-0500 EST'),
                 ('2019-03-10T07:05:00', '2019-03-10T03:05:00-0400 EDT'),
                 ('2019-03-10T10:00:00', '2019-03-10T06:00:00-0400 EDT'),
                 ('2019-11-03T05:55:00', '2019-11-03T01:55:00-0400 EDT'),
                 ('2019-11-03T06:05:00', '2019-11-03T01:05:00-0500 EST'),                    
                 ('2019-11-03T10:00:00', '2019-11-03T05:00:00-0500 EST'),                    
                 # 2020
                 ('2020-03-08T06:55:00', '2020-03-08T01:55:00-0500 EST'),
                 ('2020-03-08T07:05:00', '2020-03-08T03:05:00-0400 EDT'),
                 ('2020-03-08T10:00:00', '2020-03-08T06:00:00-0400 EDT'),
                 ('2020-11-01T05:55:00', '2020-11-01T01:55:00-0400 EDT'),
                 ('2020-11-01T06:05:00', '2020-11-01T01:05:00-0500 EST'),                    
                 ('2020-11-01T10:00:00', '2020-11-01T05:00:00-0500 EST'),                    
                 )

_tzCST_tests = ( ('2013-03-10T07:55:00', '2013-03-10T01:55:00-0600 CST'),
                 ('2013-03-10T08:05:00', '2013-03-10T03:05:00-0500 CDT'),
                 ('2013-03-11T10:00:00', '2013-03-11T05:00:00-0500 CDT'),                     
                 ('2013-11-03T06:55:00', '2013-11-03T01:55:00-0500 CDT'),
                 ('2013-11-03T07:05:00', '2013-11-03T01:05:00-0600 CST'),
                 ('2013-11-03T10:00:00', '2013-11-03T04:00:00-0600 CST'),                     
                 # 2014
                 ('2014-03-09T07:55:00', '2014-03-09T01:55:00-0600 CST'),
                 ('2014-03-09T08:05:00', '2014-03-09T03:05:00-0500 CDT'),
                 ('2014-03-09T10:00:00', '2014-03-09T05:00:00-0500 CDT'),
                 ('2014-11-02T06:55:00', '2014-11-02T01:55:00-0500 CDT'),
                 ('2014-11-02T07:05:00', '2014-11-02T01:05:00-0600 CST'),                    
                 ('2014-11-02T10:00:00', '2014-11-02T04:00:00-0600 CST'),                    
                 # 2015
                 ('2015-03-08T07:55:00', '2015-03-08T01:55:00-0600 CST'),
                 ('2015-03-08T08:05:00', '2015-03-08T03:05:00-0500 CDT'),
                 ('2015-03-08T10:00:00', '2015-03-08T05:00:00-0500 CDT'),
                 ('2015-11-01T06:55:00', '2015-11-01T01:55:00-0500 CDT'),
                 ('2015-11-01T07:05:00', '2015-11-01T01:05:00-0600 CST'),                    
                 ('2015-11-01T10:00:00', '2015-11-01T04:00:00-0600 CST'),                    
                 # 2016
                 ('2016-03-13T07:55:00', '2016-03-13T01:55:00-0600 CST'),
                 ('2016-03-13T08:05:00', '2016-03-13T03:05:00-0500 CDT'),
                 ('2016-03-13T10:00:00', '2016-03-13T05:00:00-0500 CDT'),
                 ('2016-11-06T06:55:00', '2016-11-06T01:55:00-0500 CDT'),
                 ('2016-11-06T07:05:00', '2016-11-06T01:05:00-0600 CST'),                    
                 ('2016-11-06T10:00:00', '2016-11-06T04:00:00-0600 CST'),                    
                 # 2017
                 ('2017-03-12T07:55:00', '2017-03-12T01:55:00-0600 CST'),
                 ('2017-03-12T08:05:00', '2017-03-12T03:05:00-0500 CDT'),
                 ('2017-03-12T10:00:00', '2017-03-12T05:00:00-0500 CDT'),
                 ('2017-11-05T06:55:00', '2017-11-05T01:55:00-0500 CDT'),
                 ('2017-11-05T07:05:00', '2017-11-05T01:05:00-0600 CST'),                    
                 ('2017-11-05T10:00:00', '2017-11-05T04:00:00-0600 CST'),                    
                 # 2018
                 ('2018-03-11T07:55:00', '2018-03-11T01:55:00-0600 CST'),
                 ('2018-03-11T08:05:00', '2018-03-11T03:05:00-0500 CDT'),
                 ('2018-03-11T10:00:00', '2018-03-11T05:00:00-0500 CDT'),
                 ('2018-11-04T06:55:00', '2018-11-04T01:55:00-0500 CDT'),
                 ('2018-11-04T07:05:00', '2018-11-04T01:05:00-0600 CST'),                    
                 ('2018-11-04T10:00:00', '2018-11-04T04:00:00-0600 CST'),                    
                 # 2019
                 ('2019-03-10T07:55:00', '2019-03-10T01:55:00-0600 CST'),
                 ('2019-03-10T08:05:00', '2019-03-10T03:05:00-0500 CDT'),
                 ('2019-03-10T10:00:00', '2019-03-10T05:00:00-0500 CDT'),
                 ('2019-11-03T06:55:00', '2019-11-03T01:55:00-0500 CDT'),
                 ('2019-11-03T07:05:00', '2019-11-03T01:05:00-0600 CST'),                    
                 ('2019-11-03T10:00:00', '2019-11-03T04:00:00-0600 CST'),                    
                 # 2020
                 ('2020-03-08T07:55:00', '2020-03-08T01:55:00-0600 CST'),
                 ('2020-03-08T08:05:00', '2020-03-08T03:05:00-0500 CDT'),
                 ('2020-03-08T10:00:00', '2020-03-08T05:00:00-0500 CDT'),
                 ('2020-11-01T06:55:00', '2020-11-01T01:55:00-0500 CDT'),
                 ('2020-11-01T07:05:00', '2020-11-01T01:05:00-0600 CST'),                    
                 ('2020-11-01T10:00:00', '2020-11-01T04:00:00-0600 CST'),                    
                 )

_tzMST_tests = ( ('2013-03-10T08:55:00', '2013-03-10T01:55:00-0700 MST'),
                 ('2013-03-10T09:05:00', '2013-03-10T03:05:00-0600 MDT'),
                 ('2013-03-10T12:00:00', '2013-03-10T06:00:00-0600 MDT'),
                 ('2013-11-03T07:55:00', '2013-11-03T01:55:00-0600 MDT'),
                 ('2013-11-03T08:05:00', '2013-11-03T01:05:00-0700 MST'),
                 ('2013-11-03T12:00:00', '2013-11-03T05:00:00-0700 MST'),
                 # 2014
                 ('2014-03-09T08:55:00', '2014-03-09T01:55:00-0700 MST'),
                 ('2014-03-09T09:05:00', '2014-03-09T03:05:00-0600 MDT'),
                 ('2014-03-09T12:00:00', '2014-03-09T06:00:00-0600 MDT'),
                 ('2014-11-02T07:55:00', '2014-11-02T01:55:00-0600 MDT'),
                 ('2014-11-02T08:05:00', '2014-11-02T01:05:00-0700 MST'),                    
                 ('2014-11-02T12:00:00', '2014-11-02T05:00:00-0700 MST'),                    
                 # 2015
                 ('2015-03-08T08:55:00', '2015-03-08T01:55:00-0700 MST'),
                 ('2015-03-08T09:05:00', '2015-03-08T03:05:00-0600 MDT'),
                 ('2015-03-08T12:00:00', '2015-03-08T06:00:00-0600 MDT'),
                 ('2015-11-01T07:55:00', '2015-11-01T01:55:00-0600 MDT'),
                 ('2015-11-01T08:05:00', '2015-11-01T01:05:00-0700 MST'),                    
                 ('2015-11-01T12:00:00', '2015-11-01T05:00:00-0700 MST'),                    
                 # 2016
                 ('2016-03-13T08:55:00', '2016-03-13T01:55:00-0700 MST'),
                 ('2016-03-13T09:05:00', '2016-03-13T03:05:00-0600 MDT'),
                 ('2016-03-13T12:00:00', '2016-03-13T06:00:00-0600 MDT'),
                 ('2016-11-06T07:55:00', '2016-11-06T01:55:00-0600 MDT'),
                 ('2016-11-06T08:05:00', '2016-11-06T01:05:00-0700 MST'),                    
                 ('2016-11-06T12:00:00', '2016-11-06T05:00:00-0700 MST'),                    
                 # 2017
                 ('2017-03-12T08:55:00', '2017-03-12T01:55:00-0700 MST'),
                 ('2017-03-12T09:05:00', '2017-03-12T03:05:00-0600 MDT'),
                 ('2017-03-12T12:00:00', '2017-03-12T06:00:00-0600 MDT'),
                 ('2017-11-05T07:55:00', '2017-11-05T01:55:00-0600 MDT'),
                 ('2017-11-05T08:05:00', '2017-11-05T01:05:00-0700 MST'),                    
                 ('2017-11-05T12:00:00', '2017-11-05T05:00:00-0700 MST'),                    
                 # 2018
                 ('2018-03-11T08:55:00', '2018-03-11T01:55:00-0700 MST'),
                 ('2018-03-11T09:05:00', '2018-03-11T03:05:00-0600 MDT'),
                 ('2018-03-11T12:00:00', '2018-03-11T06:00:00-0600 MDT'),
                 ('2018-11-04T07:55:00', '2018-11-04T01:55:00-0600 MDT'),
                 ('2018-11-04T08:05:00', '2018-11-04T01:05:00-0700 MST'),                    
                 ('2018-11-04T12:00:00', '2018-11-04T05:00:00-0700 MST'),                    
                 # 2019
                 ('2019-03-10T08:55:00', '2019-03-10T01:55:00-0700 MST'),
                 ('2019-03-10T09:05:00', '2019-03-10T03:05:00-0600 MDT'),
                 ('2019-03-10T12:00:00', '2019-03-10T06:00:00-0600 MDT'),
                 ('2019-11-03T07:55:00', '2019-11-03T01:55:00-0600 MDT'),
                 ('2019-11-03T08:05:00', '2019-11-03T01:05:00-0700 MST'),                    
                 ('2019-11-03T12:00:00', '2019-11-03T05:00:00-0700 MST'),                    
                 # 2020
                 ('2020-03-08T08:55:00', '2020-03-08T01:55:00-0700 MST'),
                 ('2020-03-08T09:05:00', '2020-03-08T03:05:00-0600 MDT'),
                 ('2020-03-08T12:00:00', '2020-03-08T06:00:00-0600 MDT'),
                 ('2020-11-01T07:55:00', '2020-11-01T01:55:00-0600 MDT'),
                 ('2020-11-01T08:05:00', '2020-11-01T01:05:00-0700 MST'),                    
                 ('2020-11-01T12:00:00', '2020-11-01T05:00:00-0700 MST'),                    
                 )
_tzPST_tests = ( ('2013-03-10T09:55:00', '2013-03-10T01:55:00-0800 PST'),
                 ('2013-03-10T10:05:00', '2013-03-10T03:05:00-0700 PDT'),
                 ('2013-03-10T14:00:00', '2013-03-10T07:00:00-0700 PDT'),
                 ('2013-11-03T08:55:00', '2013-11-03T01:55:00-0700 PDT'),
                 ('2013-11-03T09:05:00', '2013-11-03T01:05:00-0800 PST'),
                 ('2013-11-03T14:00:00', '2013-11-03T06:00:00-0800 PST'),
                 # 2014
                 ('2014-03-09T09:55:00', '2014-03-09T01:55:00-0800 PST'),
                 ('2014-03-09T10:05:00', '2014-03-09T03:05:00-0700 PDT'),
                 ('2014-03-09T14:00:00', '2014-03-09T07:00:00-0700 PDT'),
                 ('2014-11-02T08:55:00', '2014-11-02T01:55:00-0700 PDT'),
                 ('2014-11-02T09:05:00', '2014-11-02T01:05:00-0800 PST'),                    
                 ('2014-11-02T14:00:00', '2014-11-02T06:00:00-0800 PST'),                    
                 # 2015
                 ('2015-03-08T09:55:00', '2015-03-08T01:55:00-0800 PST'),
                 ('2015-03-08T10:05:00', '2015-03-08T03:05:00-0700 PDT'),
                 ('2015-03-08T14:00:00', '2015-03-08T07:00:00-0700 PDT'),
                 ('2015-11-01T08:55:00', '2015-11-01T01:55:00-0700 PDT'),
                 ('2015-11-01T09:05:00', '2015-11-01T01:05:00-0800 PST'),                    
                 ('2015-11-01T14:00:00', '2015-11-01T06:00:00-0800 PST'),                    
                 # 2016
                 ('2016-03-13T09:55:00', '2016-03-13T01:55:00-0800 PST'),
                 ('2016-03-13T10:05:00', '2016-03-13T03:05:00-0700 PDT'),
                 ('2016-03-13T14:00:00', '2016-03-13T07:00:00-0700 PDT'),
                 ('2016-11-06T08:55:00', '2016-11-06T01:55:00-0700 PDT'),
                 ('2016-11-06T09:05:00', '2016-11-06T01:05:00-0800 PST'),                    
                 ('2016-11-06T14:00:00', '2016-11-06T06:00:00-0800 PST'),                    
                 # 2017
                 ('2017-03-12T09:55:00', '2017-03-12T01:55:00-0800 PST'),
                 ('2017-03-12T10:05:00', '2017-03-12T03:05:00-0700 PDT'),
                 ('2017-03-12T14:00:00', '2017-03-12T07:00:00-0700 PDT'),
                 ('2017-11-05T08:55:00', '2017-11-05T01:55:00-0700 PDT'),
                 ('2017-11-05T09:05:00', '2017-11-05T01:05:00-0800 PST'),                    
                 ('2017-11-05T14:00:00', '2017-11-05T06:00:00-0800 PST'),                    
                 # 2018
                 ('2018-03-11T09:55:00', '2018-03-11T01:55:00-0800 PST'),
                 ('2018-03-11T10:05:00', '2018-03-11T03:05:00-0700 PDT'),
                 ('2018-03-11T14:00:00', '2018-03-11T07:00:00-0700 PDT'),
                 ('2018-11-04T08:55:00', '2018-11-04T01:55:00-0700 PDT'),
                 ('2018-11-04T09:05:00', '2018-11-04T01:05:00-0800 PST'),                    
                 ('2018-11-04T14:00:00', '2018-11-04T06:00:00-0800 PST'),                    
                 # 2019
                 ('2019-03-10T09:55:00', '2019-03-10T01:55:00-0800 PST'),
                 ('2019-03-10T10:05:00', '2019-03-10T03:05:00-0700 PDT'),
                 ('2019-03-10T14:00:00', '2019-03-10T07:00:00-0700 PDT'),
                 ('2019-11-03T08:55:00', '2019-11-03T01:55:00-0700 PDT'),
                 ('2019-11-03T09:05:00', '2019-11-03T01:05:00-0800 PST'),                    
                 ('2019-11-03T14:00:00', '2019-11-03T06:00:00-0800 PST'),                    
                 # 2020
                 ('2020-03-08T09:55:00', '2020-03-08T01:55:00-0800 PST'),
                 ('2020-03-08T10:05:00', '2020-03-08T03:05:00-0700 PDT'),
                 ('2020-03-08T14:00:00', '2020-03-08T07:00:00-0700 PDT'),
                 ('2020-11-01T08:55:00', '2020-11-01T01:55:00-0700 PDT'),
                 ('2020-11-01T09:05:00', '2020-11-01T01:05:00-0800 PST'),                    
                 ('2020-11-01T14:00:00', '2020-11-01T06:00:00-0800 PST'),                    
                 )       

_tzAKST_tests = (('2013-03-10T10:55:00', '2013-03-10T01:55:00-0900 AKST'),
                 ('2013-03-10T11:05:00', '2013-03-10T03:05:00-0800 AKDT'),
                 ('2013-03-10T15:00:00', '2013-03-10T07:00:00-0800 AKDT'),
                 ('2013-11-03T09:55:00', '2013-11-03T01:55:00-0800 AKDT'),
                 ('2013-11-03T10:05:00', '2013-11-03T01:05:00-0900 AKST'),
                 ('2013-11-03T15:00:00', '2013-11-03T06:00:00-0900 AKST'),
                 # 2014
                 ('2014-03-09T10:55:00', '2014-03-09T01:55:00-0900 AKST'),
                 ('2014-03-09T11:05:00', '2014-03-09T03:05:00-0800 AKDT'),
                 ('2014-03-09T15:00:00', '2014-03-09T07:00:00-0800 AKDT'),
                 ('2014-11-02T09:55:00', '2014-11-02T01:55:00-0800 AKDT'),
                 ('2014-11-02T10:05:00', '2014-11-02T01:05:00-0900 AKST'),                    
                 ('2014-11-02T15:00:00', '2014-11-02T06:00:00-0900 AKST'),                    
                 # 2015
                 ('2015-03-08T10:55:00', '2015-03-08T01:55:00-0900 AKST'),
                 ('2015-03-08T11:05:00', '2015-03-08T03:05:00-0800 AKDT'),
                 ('2015-03-08T15:00:00', '2015-03-08T07:00:00-0800 AKDT'),
                 ('2015-11-01T09:55:00', '2015-11-01T01:55:00-0800 AKDT'),
                 ('2015-11-01T10:05:00', '2015-11-01T01:05:00-0900 AKST'),                    
                 ('2015-11-01T15:00:00', '2015-11-01T06:00:00-0900 AKST'),                    
                 # 2016
                 ('2016-03-13T10:55:00', '2016-03-13T01:55:00-0900 AKST'),
                 ('2016-03-13T11:05:00', '2016-03-13T03:05:00-0800 AKDT'),
                 ('2016-03-13T15:00:00', '2016-03-13T07:00:00-0800 AKDT'),
                 ('2016-11-06T09:55:00', '2016-11-06T01:55:00-0800 AKDT'),
                 ('2016-11-06T10:05:00', '2016-11-06T01:05:00-0900 AKST'),                    
                 ('2016-11-06T15:00:00', '2016-11-06T06:00:00-0900 AKST'),                    
                 # 2017
                 ('2017-03-12T10:55:00', '2017-03-12T01:55:00-0900 AKST'),
                 ('2017-03-12T11:05:00', '2017-03-12T03:05:00-0800 AKDT'),
                 ('2017-03-12T15:00:00', '2017-03-12T07:00:00-0800 AKDT'),
                 ('2017-11-05T09:55:00', '2017-11-05T01:55:00-0800 AKDT'),
                 ('2017-11-05T10:05:00', '2017-11-05T01:05:00-0900 AKST'),                    
                 ('2017-11-05T15:00:00', '2017-11-05T06:00:00-0900 AKST'),                    
                 # 2018
                 ('2018-03-11T10:55:00', '2018-03-11T01:55:00-0900 AKST'),
                 ('2018-03-11T11:05:00', '2018-03-11T03:05:00-0800 AKDT'),
                 ('2018-03-11T15:00:00', '2018-03-11T07:00:00-0800 AKDT'),
                 ('2018-11-04T09:55:00', '2018-11-04T01:55:00-0800 AKDT'),
                 ('2018-11-04T10:05:00', '2018-11-04T01:05:00-0900 AKST'),                    
                 ('2018-11-04T15:00:00', '2018-11-04T06:00:00-0900 AKST'),                    
                 # 2019
                 ('2019-03-10T10:55:00', '2019-03-10T01:55:00-0900 AKST'),
                 ('2019-03-10T11:05:00', '2019-03-10T03:05:00-0800 AKDT'),
                 ('2019-03-10T15:00:00', '2019-03-10T07:00:00-0800 AKDT'),
                 ('2019-11-03T09:55:00', '2019-11-03T01:55:00-0800 AKDT'),
                 ('2019-11-03T10:05:00', '2019-11-03T01:05:00-0900 AKST'),                    
                 ('2019-11-03T15:00:00', '2019-11-03T06:00:00-0900 AKST'),                    
                 # 2020
                 ('2020-03-08T10:55:00', '2020-03-08T01:55:00-0900 AKST'),
                 ('2020-03-08T11:05:00', '2020-03-08T03:05:00-0800 AKDT'),
                 ('2020-03-08T15:00:00', '2020-03-08T07:00:00-0800 AKDT'),
                 ('2020-11-01T09:55:00', '2020-11-01T01:55:00-0800 AKDT'),
                 ('2020-11-01T10:05:00', '2020-11-01T01:05:00-0900 AKST'),                    
                 ('2020-11-01T15:00:00', '2020-11-01T06:00:00-0900 AKST'),                    
                 )       

# Common timezones
#_tzWET = _Timezone('Western European', 'Europe/London', _tzWET_tests)
#_tzCET = _Timezone('Central European', 'Europe/Berlin', _tzCET_tests)
#_tzEET = _Timezone('Eastern European', 'Europe/Athens', _tzEET_tests)
#_tzEEFT= _Timezone('Eastern European Forward', 'Europe/Minsk', _tzEEFT_tests)
_tzWET = _Timezone('Western European', 'WET+0WEST,M3.5.0/1,M10.5.0/2', _tzWET_tests)
_tzCET = _Timezone('Central European', 'CET-1CEST,M3.5.0/2,M10.5.0/3', _tzCET_tests)
_tzEET = _Timezone('Eastern European', 'EET-2EEST,M3.5.0/3,M10.5.0/4', _tzEET_tests)
_tzEEFT= _Timezone('Eastern European Forward', 'EEFT-3', _tzEEFT_tests)

######################################################################
#
# List of countries
#

# Australasia
class Australia():
    """ Australia ( http://en.wikipedia.org/wiki/Australia) """
    
    @staticmethod
    def getCountryCode():
        return 'AU'

    @staticmethod
    def getContinent():
        return 'Australasia'
    
    @staticmethod
    def getCountry():
        return 'Australia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'en', 'en_AU.UTF-8'), )
        
    @staticmethod
    def getTimezones():
        awstTestData = (('2013-10-05T23:00:00', '2013-10-06T07:00:00+0800 AWST' ),)        
        acstTestData = (('2013-10-05T16:25:00', '2013-10-06T01:55:00+0930 ACST' ),
                        ('2013-10-05T16:35:00', '2013-10-06T03:05:00+1030 ACDT' ),
                        ('2013-10-05T20:30:00', '2013-10-06T07:00:00+1030 ACDT' ),
                        ('2013-04-06T16:25:00', '2013-04-07T02:55:00+1030 ACDT' ),
                        ('2013-04-06T16:35:00', '2013-04-07T02:05:00+0930 ACST' ),
                        ('2013-04-06T21:30:00', '2013-04-07T07:00:00+0930 ACST' ),
                        # 2014
                        ('2014-10-04T16:25:00', '2014-10-05T01:55:00+0930 ACST' ),
                        ('2014-10-04T16:35:00', '2014-10-05T03:05:00+1030 ACDT' ),
                        ('2014-10-04T20:30:00', '2014-10-05T07:00:00+1030 ACDT' ),
                        ('2014-04-05T16:25:00', '2014-04-06T02:55:00+1030 ACDT' ),
                        ('2014-04-05T16:35:00', '2014-04-06T02:05:00+0930 ACST' ),
                        ('2014-04-05T21:30:00', '2014-04-06T07:00:00+0930 ACST' ),
                        # 2015
                        ('2015-10-03T16:25:00', '2015-10-04T01:55:00+0930 ACST' ),
                        ('2015-10-03T16:35:00', '2015-10-04T03:05:00+1030 ACDT' ),
                        ('2015-10-03T20:30:00', '2015-10-04T07:00:00+1030 ACDT' ),
                        ('2015-04-04T16:25:00', '2015-04-05T02:55:00+1030 ACDT' ),
                        ('2015-04-04T16:35:00', '2015-04-05T02:05:00+0930 ACST' ),
                        ('2015-04-04T21:30:00', '2015-04-05T07:00:00+0930 ACST' ),
                        # 2016
                        ('2016-10-01T16:25:00', '2016-10-02T01:55:00+0930 ACST' ),
                        ('2016-10-01T16:35:00', '2016-10-02T03:05:00+1030 ACDT' ),
                        ('2016-10-01T20:30:00', '2016-10-02T07:00:00+1030 ACDT' ),
                        ('2016-04-02T16:25:00', '2016-04-03T02:55:00+1030 ACDT' ),
                        ('2016-04-02T16:35:00', '2016-04-03T02:05:00+0930 ACST' ),
                        ('2016-04-02T21:30:00', '2016-04-03T07:00:00+0930 ACST' ),
                        # 2017
                        ('2017-09-30T16:25:00', '2017-10-01T01:55:00+0930 ACST' ),
                        ('2017-09-30T16:35:00', '2017-10-01T03:05:00+1030 ACDT' ),
                        ('2017-09-30T20:30:00', '2017-10-01T07:00:00+1030 ACDT' ),
                        ('2017-04-01T16:25:00', '2017-04-02T02:55:00+1030 ACDT' ),
                        ('2017-04-01T16:35:00', '2017-04-02T02:05:00+0930 ACST' ),
                        ('2017-04-01T21:30:00', '2017-04-02T07:00:00+0930 ACST' ),
                        # 2018
                        ('2018-10-06T16:25:00', '2018-10-07T01:55:00+0930 ACST' ),
                        ('2018-10-06T16:35:00', '2018-10-07T03:05:00+1030 ACDT' ),
                        ('2018-10-06T20:30:00', '2018-10-07T07:00:00+1030 ACDT' ),
                        ('2018-03-31T16:25:00', '2018-04-01T02:55:00+1030 ACDT' ),
                        ('2018-03-31T16:35:00', '2018-04-01T02:05:00+0930 ACST' ),
                        ('2018-03-31T21:30:00', '2018-04-01T07:00:00+0930 ACST' ),
                        # 2019
                        ('2019-10-05T16:25:00', '2019-10-06T01:55:00+0930 ACST' ),
                        ('2019-10-05T16:35:00', '2019-10-06T03:05:00+1030 ACDT' ),
                        ('2019-10-05T20:30:00', '2019-10-06T07:00:00+1030 ACDT' ),
                        ('2019-04-06T16:25:00', '2019-04-07T02:55:00+1030 ACDT' ),
                        ('2019-04-06T16:35:00', '2019-04-07T02:05:00+0930 ACST' ),
                        ('2019-04-06T21:30:00', '2019-04-07T07:00:00+0930 ACST' ),
                        # 2020
                        ('2020-10-03T16:25:00', '2020-10-04T01:55:00+0930 ACST' ),
                        ('2020-10-03T16:35:00', '2020-10-04T03:05:00+1030 ACDT' ),
                        ('2020-10-03T20:30:00', '2020-10-04T07:00:00+1030 ACDT' ),
                        ('2020-04-04T16:25:00', '2020-04-05T02:55:00+1030 ACDT' ),
                        ('2020-04-04T16:35:00', '2020-04-05T02:05:00+0930 ACST' ),
                        ('2020-04-04T21:30:00', '2020-04-05T07:00:00+0930 ACST' ),
                     )        
        acstTestData_nodst = (('2013-10-05T21:30:00', '2013-10-06T07:00:00+0930 ACST' ),)        
        aestTestData = (('2013-10-05T15:55:00', '2013-10-06T01:55:00+1000 AEST' ),
                        ('2013-10-05T16:05:00', '2013-10-06T03:05:00+1100 AEDT' ),
                        ('2013-10-05T20:00:00', '2013-10-06T07:00:00+1100 AEDT' ),
                        ('2013-04-06T15:55:00', '2013-04-07T02:55:00+1100 AEDT' ),
                        ('2013-04-06T16:05:00', '2013-04-07T02:05:00+1000 AEST' ),
                        ('2013-04-06T21:00:00', '2013-04-07T07:00:00+1000 AEST' ),
                        # 2014
                        ('2014-10-04T15:55:00', '2014-10-05T01:55:00+1000 AEST' ),
                        ('2014-10-04T16:05:00', '2014-10-05T03:05:00+1100 AEDT' ),
                        ('2014-10-04T20:00:00', '2014-10-05T07:00:00+1100 AEDT' ),
                        ('2014-04-05T15:55:00', '2014-04-06T02:55:00+1100 AEDT' ),
                        ('2014-04-05T16:05:00', '2014-04-06T02:05:00+1000 AEST' ),
                        ('2014-04-05T21:00:00', '2014-04-06T07:00:00+1000 AEST' ),
                        # 2015       
                        ('2015-10-03T15:55:00', '2015-10-04T01:55:00+1000 AEST' ),
                        ('2015-10-03T16:05:00', '2015-10-04T03:05:00+1100 AEDT' ),
                        ('2015-10-03T20:00:00', '2015-10-04T07:00:00+1100 AEDT' ),
                        ('2015-04-04T15:55:00', '2015-04-05T02:55:00+1100 AEDT' ),
                        ('2015-04-04T16:05:00', '2015-04-05T02:05:00+1000 AEST' ),
                        ('2015-04-04T21:00:00', '2015-04-05T07:00:00+1000 AEST' ),
                        # 2016                             
                        ('2016-10-01T15:55:00', '2016-10-02T01:55:00+1000 AEST' ),
                        ('2016-10-01T16:05:00', '2016-10-02T03:05:00+1100 AEDT' ),
                        ('2016-10-01T20:00:00', '2016-10-02T07:00:00+1100 AEDT' ),
                        ('2016-04-02T15:55:00', '2016-04-03T02:55:00+1100 AEDT' ),
                        ('2016-04-02T16:05:00', '2016-04-03T02:05:00+1000 AEST' ),
                        ('2016-04-02T21:00:00', '2016-04-03T07:00:00+1000 AEST' ),
                        # 2017                             
                        ('2017-09-30T15:55:00', '2017-10-01T01:55:00+1000 AEST' ),
                        ('2017-09-30T16:05:00', '2017-10-01T03:05:00+1100 AEDT' ),
                        ('2017-09-30T20:00:00', '2017-10-01T07:00:00+1100 AEDT' ),
                        ('2017-04-01T15:55:00', '2017-04-02T02:55:00+1100 AEDT' ),
                        ('2017-04-01T16:05:00', '2017-04-02T02:05:00+1000 AEST' ),
                        ('2017-04-01T21:00:00', '2017-04-02T07:00:00+1000 AEST' ),
                        # 2018                             
                        ('2018-10-06T15:55:00', '2018-10-07T01:55:00+1000 AEST' ),
                        ('2018-10-06T16:05:00', '2018-10-07T03:05:00+1100 AEDT' ),
                        ('2018-10-06T20:00:00', '2018-10-07T07:00:00+1100 AEDT' ),
                        ('2018-03-31T15:55:00', '2018-04-01T02:55:00+1100 AEDT' ),
                        ('2018-03-31T16:05:00', '2018-04-01T02:05:00+1000 AEST' ),
                        ('2018-03-31T21:00:00', '2018-04-01T07:00:00+1000 AEST' ),
                        # 2019                             
                        ('2019-10-05T15:55:00', '2019-10-06T01:55:00+1000 AEST' ),
                        ('2019-10-05T16:05:00', '2019-10-06T03:05:00+1100 AEDT' ),
                        ('2019-10-05T20:00:00', '2019-10-06T07:00:00+1100 AEDT' ),
                        ('2019-04-06T15:55:00', '2019-04-07T02:55:00+1100 AEDT' ),
                        ('2019-04-06T16:05:00', '2019-04-07T02:05:00+1000 AEST' ),
                        ('2019-04-06T21:00:00', '2019-04-07T07:00:00+1000 AEST' ),
                        # 2020                             
                        ('2020-10-03T15:55:00', '2020-10-04T01:55:00+1000 AEST' ),
                        ('2020-10-03T16:05:00', '2020-10-04T03:05:00+1100 AEDT' ),
                        ('2020-10-03T20:00:00', '2020-10-04T07:00:00+1100 AEDT' ),
                        ('2020-04-04T15:55:00', '2020-04-05T02:55:00+1100 AEDT' ),
                        ('2020-04-04T16:05:00', '2020-04-05T02:05:00+1000 AEST' ),
                        ('2020-04-04T21:00:00', '2020-04-05T07:00:00+1000 AEST' ),
                 )        
        aestTestData_nodst = (('2013-10-05T21:00:00', '2013-10-06T07:00:00+1000 AEST' ),)        
        #return ( _Timezone('Western Time',          'Australia/Perth',  awstTestData),
        #         _Timezone('Central Time (no DST)', 'Australia/Darwin', acstTestData_nodst),
        #         _Timezone('Central Time',          'Australia/Adelaide', acstTestData),
        #         _Timezone('Eastern Time (no DST)', 'Australia/Brisbane', aestTestData_nodst),
        #         _Timezone('Eastern Time',          'Australia/Sydney', aestTestData) )
        return ( _Timezone('Western Time',           'AWST-8',      awstTestData),
                 _Timezone('Central Time (no DST)',  'ACST-09:30',  acstTestData_nodst),
                 _Timezone('Central Time',           'ACST-09:30ACDT,M10.1.0/2,M4.1.0/3', acstTestData),
                 _Timezone('Eastern Time (no DST)',  'AEST-10',     aestTestData_nodst),
                 _Timezone('Eastern Time',           'AEST-10AEDT,M10.1.0/2,M4.1.0/3',aestTestData),
                 )


class NewZealand():
    """ New Zealand ( http://en.wikipedia.org/wiki/New_Zealand ) """
    
    @staticmethod
    def getCountryCode():
        return 'NZ'

    @staticmethod
    def getContinent():
        return 'Australasia'
    
    @staticmethod
    def getCountry():
        return 'New Zealand'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'en', 'en_NZ.UTF-8'), )
        
    @staticmethod
    def getTimezones():
        nzstTestData = (('2013-09-28T13:55:00', '2013-09-29T01:55:00+1200 NZST' ),                        
                        ('2013-09-28T14:05:00', '2013-09-29T03:05:00+1300 NZDT' ),                        
                        ('2013-04-06T13:55:00', '2013-04-07T02:55:00+1300 NZDT' ),
                        ('2013-04-06T14:05:00', '2013-04-07T02:05:00+1200 NZST' ),
                        # 2014
                        ('2014-09-27T13:55:00', '2014-09-28T01:55:00+1200 NZST' ),                        
                        ('2014-09-27T14:05:00', '2014-09-28T03:05:00+1300 NZDT' ),                        
                        ('2014-04-05T13:55:00', '2014-04-06T02:55:00+1300 NZDT' ),
                        ('2014-04-05T14:05:00', '2014-04-06T02:05:00+1200 NZST' ),
                        # 2015
                        ('2015-09-26T13:55:00', '2015-09-27T01:55:00+1200 NZST' ),                        
                        ('2015-09-26T14:05:00', '2015-09-27T03:05:00+1300 NZDT' ),                        
                        ('2015-04-04T13:55:00', '2015-04-05T02:55:00+1300 NZDT' ),
                        ('2015-04-04T14:05:00', '2015-04-05T02:05:00+1200 NZST' ),
                        # 2016
                        ('2016-09-24T13:55:00', '2016-09-25T01:55:00+1200 NZST' ),                        
                        ('2016-09-24T14:05:00', '2016-09-25T03:05:00+1300 NZDT' ),                        
                        ('2016-04-02T13:55:00', '2016-04-03T02:55:00+1300 NZDT' ),
                        ('2016-04-02T14:05:00', '2016-04-03T02:05:00+1200 NZST' ),
                        # 2017
                        ('2017-09-23T13:55:00', '2017-09-24T01:55:00+1200 NZST' ),                        
                        ('2017-09-23T14:05:00', '2017-09-24T03:05:00+1300 NZDT' ),                        
                        ('2017-04-01T13:55:00', '2017-04-02T02:55:00+1300 NZDT' ),
                        ('2017-04-01T14:05:00', '2017-04-02T02:05:00+1200 NZST' ),
                        # 2018
                        ('2018-09-29T13:55:00', '2018-09-30T01:55:00+1200 NZST' ),                        
                        ('2018-09-29T14:05:00', '2018-09-30T03:05:00+1300 NZDT' ),                        
                        ('2018-03-31T13:55:00', '2018-04-01T02:55:00+1300 NZDT' ),
                        ('2018-03-31T14:05:00', '2018-04-01T02:05:00+1200 NZST' ),
                        # 2019
                        ('2019-09-28T13:55:00', '2019-09-29T01:55:00+1200 NZST' ),                        
                        ('2019-09-28T14:05:00', '2019-09-29T03:05:00+1300 NZDT' ),                        
                        ('2019-04-06T13:55:00', '2019-04-07T02:55:00+1300 NZDT' ),
                        ('2019-04-06T14:05:00', '2019-04-07T02:05:00+1200 NZST' ),
                        # 2020
                        ('2020-09-26T13:55:00', '2020-09-27T01:55:00+1200 NZST' ),                        
                        ('2020-09-26T14:05:00', '2020-09-27T03:05:00+1300 NZDT' ),                        
                        ('2020-04-04T13:55:00', '2020-04-05T02:55:00+1300 NZDT' ),
                        ('2020-04-04T14:05:00', '2020-04-05T02:05:00+1200 NZST' ),
                 )        
        return ( _Timezone('Standard',  'NZST-12NZDT,M9.5.0/2,M4.1.0/3', nzstTestData),)  


# Europe

class Austria():
    """ Austria ( http://en.wikipedia.org/wiki/Austria ) """
    
    @staticmethod
    def getCountryCode():
        return 'AT'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Austria'
    
    @staticmethod
    def getLanguages():
        return ( _Language('German', 'de', 'de_AT.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Belgium():
    """ Belgium ( http://en.wikipedia.org/wiki/Belgium ) """
    
    @staticmethod
    def getCountryCode():
        return 'BE'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Belgium'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Dutch', 'nl', 'nl_BE.UTF-8'),
                 _Language('French', 'fr', 'fr_BE.UTF-8'),
                 _Language('German', 'de', 'de_BE.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Bulgaria():
    """ Bulgaria ( http://en.wikipedia.org/wiki/Bulgaria ) """
    
    @staticmethod
    def getCountryCode():
        return 'BG'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Bulgaria'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Bulgarian', 'bg', 'bg_BG.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class Croatia():
    """ Croatia ( http://en.wikipedia.org/wiki/Croatia ) """
    
    @staticmethod
    def getCountryCode():
        return 'HR'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Croatia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Croatian', 'hr', 'hr_HR.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Cyprus():
    """ Cyprus ( http://en.wikipedia.org/wiki/Cyprus ) """
    
    @staticmethod
    def getCountryCode():
        return 'CY'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Cyprus'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Greek', 'el', 'el_CY.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class CzechRepublic():
    """ Czech Republic ( http://en.wikipedia.org/wiki/Czech_republic ) """
    
    @staticmethod
    def getCountryCode():
        return 'CZ'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Czech Republic'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Czech', 'cs', 'cs_CZ.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Denmark():
    """ Denmark ( http://en.wikipedia.org/wiki/Denmark ) """
    
    @staticmethod
    def getCountryCode():
        return 'DK'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Denmark'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Danish', 'da', 'da_DK.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Estonia():
    """ Estonia ( http://en.wikipedia.org/wiki/Estonia ) """

    @staticmethod
    def getCountryCode():
        return 'EE'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Estonia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Estonian', 'et', 'et_EE.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class Finland():
    """ Finland ( http://en.wikipedia.org/wiki/Finland ) """
    
    @staticmethod
    def getCountryCode():
        return 'FI'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Finland'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Finnish', 'fi', 'fi_FI.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class France():
    """ France ( http://en.wikipedia.org/wiki/France ) """
    
    @staticmethod
    def getCountryCode():
        return 'FR'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'France'
    
    @staticmethod
    def getLanguages():
        return ( _Language('French', 'fr', 'fr_FR.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Germany():
    """ Germany ( http://en.wikipedia.org/wiki/Germany ) """
    
    @staticmethod
    def getCountryCode():
        return 'DE'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Germany'
    
    @staticmethod
    def getLanguages():
        return ( _Language('German', 'de', 'de_DE.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Greece():
    """ Greece ( http://en.wikipedia.org/wiki/Greece ) """
    
    @staticmethod
    def getCountryCode():
        return 'GR'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Greece'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Greek', 'el', 'el_GR.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class Hungary():
    """ Hungary ( http://en.wikipedia.org/wiki/Hungary ) """
    
    @staticmethod
    def getCountryCode():
        return 'HU'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Hungary'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Hungarian', 'hu', 'hu_HU.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Ireland():
    """ Ireland ( http://en.wikipedia.org/wiki/Ireland ) """
    
    @staticmethod
    def getCountryCode():
        return 'IE'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Ireland'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'en', 'en_IE.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzWET, )    



class Italy():
    """ Italy ( http://en.wikipedia.org/wiki/Italy ) """
    
    @staticmethod
    def getCountryCode():
        return 'IT'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Italy'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Italian', 'it', 'it_IT.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Latvia():
    """ Latvia ( http://en.wikipedia.org/wiki/Latvia ) """
    
    @staticmethod
    def getCountryCode():
        return 'LV'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Latvia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Latvian', 'lv', 'lv_LV.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class Lithuania():
    """ Lithuania ( http://en.wikipedia.org/wiki/Lithuania ) """

    @staticmethod
    def getCountryCode():
        return 'LT'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Lithuania'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Lithuanian', 'lt', 'lt_LT.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class Luxembourg():
    """ Luxembourg ( http://en.wikipedia.org/wiki/Luxembourg ) """
    
    @staticmethod
    def getCountryCode():
        return 'LU'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Luxembourg'
    
    @staticmethod
    def getLanguages():
        return ( _Language('French', 'fr', 'fr_LU.UTF-8'),
                 _Language('German', 'de', 'de_LU.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Netherlands():
    """ Netherlands ( http://en.wikipedia.org/wiki/Netherlands ) """
    
    @staticmethod
    def getCountryCode():
        return 'NL'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Netherlands'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Dutch', 'nl', 'nl_NL.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Norway():
    """ Norway ( http://en.wikipedia.org/wiki/Norway ) """
    
    @staticmethod
    def getCountryCode():
        return 'NO'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Norway'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Norwegian', 'nb', 'nb_NO.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Poland():
    """ Poland ( http://en.wikipedia.org/wiki/Poland ) """
    
    @staticmethod
    def getCountryCode():
        return 'PL'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Poland'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Polish', 'pl', 'pl_PL.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Portugal():
    """ Portugal ( http://en.wikipedia.org/wiki/Portugal ) """
    
    @staticmethod
    def getCountryCode():
        return 'PT'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Portugal'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Portuguese', 'pt', 'pt_PT.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzWET, )    



class Romania():
    """ Romania ( http://en.wikipedia.org/wiki/Romania ) """
    
    @staticmethod
    def getCountryCode():
        return 'RO'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Romania'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Romanian', 'ro', 'ro_RO.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    


 
class Russia():
    """ Russia ( http://en.wikipedia.org/wiki/Russia ) """
    
    @staticmethod
    def getCountryCode():
        return 'RU'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Russia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Russian', 'ru', 'ru_RU.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'Kaliningrad Time',     'USZ-3' ),
                 _Timezone( 'Moscow Time',          'MSK-4' ),
                 _Timezone( 'Yekaterinburg Time',   'YEKST-6' ),
                 _Timezone( 'Omsk Time',            'OMSST-7' ),
                 _Timezone( 'Krasnoyarsk Time',     'KRAST-8' ),
                 _Timezone( 'Irkutsk Time',         'IRKST-9' ),
                 _Timezone( 'Yakutsk Time',         'YAKST-10' ),
                 _Timezone( 'Vladivostok Time',     'VLAST-11' ),
                 _Timezone( 'Magadan Time',         'MAGST-12' ), )
    


class Serbia():
    """ Serbia ( http://en.wikipedia.org/wiki/Serbia ) """
    
    @staticmethod
    def getCountryCode():
        return 'RS'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Serbia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Serbian', 'sr', 'sr_RS.UTF-8'), ) 
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )  
    

class Slovakia():
    """ Slovakia ( http://en.wikipedia.org/wiki/Slovakia ) """
    
    @staticmethod
    def getCountryCode():
        return 'SK'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Slovakia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Slovak', 'sk', 'sk_SK.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Slovenia():
    """ Slovenia ( http://en.wikipedia.org/wiki/Slovenia ) """
    
    @staticmethod
    def getCountryCode():
        return 'SI'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Slovenia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Slovene', 'sl', 'sl_SI.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Spain():
    """ Spain ( http://en.wikipedia.org/wiki/Spain ) """
    
    @staticmethod
    def getCountryCode():
        return 'ES'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Spain'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Spanish', 'es', 'es_ES.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Sweden():
    """ Sweden ( http://en.wikipedia.org/wiki/Sweden ) """
    
    @staticmethod
    def getCountryCode():
        return 'SE'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Sweden'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Swedish', 'sv', 'sv_SE.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Switzerland():
    """ Switzerland ( http://en.wikipedia.org/wiki/Switzerland ) """
    
    @staticmethod
    def getCountryCode():
        return 'CH'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Switzerland'
    
    @staticmethod
    def getLanguages():
        return ( _Language('French', 'fr', 'fr_CH.UTF-8'),
                 _Language('German', 'de', 'de_CH.UTF-8'),
                 _Language('Italian', 'it', 'it_CH.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzCET, )    



class Turkey():
    """ Turkey ( http://en.wikipedia.org/wiki/Turkey ) """
    
    @staticmethod
    def getCountryCode():
        return 'TR'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'Turkey'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Turkish', 'tr', 'tr_TR.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzEET, )    



class UnitedKingdom():
    """ United Kingdom ( http://en.wikipedia.org/wiki/UnitedKingdom ) """
    
    @staticmethod
    def getCountryCode():
        return 'GB'

    @staticmethod
    def getContinent():
        return 'Europe'
    
    @staticmethod
    def getCountry():
        return 'United Kingdom'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'en', 'en_GB.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _tzWET, )    


# North America

class Canada():
    """ Canada ( http://en.wikipedia.org/wiki/Canada ) """
    
    @staticmethod
    def getCountryCode():
        return 'CA'

    @staticmethod
    def getContinent():
        return 'North America'
    
    @staticmethod
    def getCountry():
        return 'Canada'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'en', 'en_CA.UTF-8'), 
                 _Language('French',  'fr', 'fr_CA.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        #return ( _Timezone('Atlantic standard', 'America/Halifax', astTests),
        #         _Timezone('Atlantic (no DST)', 'AST+4'),
        #         _Timezone('Eastern standard',  'America/Toronto', estTests),  
        #         _Timezone('Eastern (no DST)',  'EST+5'),                 
        #         _Timezone('Central standard',  'America/Winnipeg', cstTests), 
        #         _Timezone('Central (no DST)',  'America/Vancouver'),
        #         _Timezone('Mountain standard', 'America/Edmonton', mstTests), 
        #         _Timezone('Mountain (no DST)', 'MST+7'), 
        #         _Timezone('Pacific standard',  'America/Vancouver', pstTests), ) 
        return ( _Timezone('Atlantic standard', 'AST+4ADT,M3.2.0,M11.1.0', _tzAST_tests),
                 _Timezone('Atlantic (no DST)', 'AST+4'),
                 _Timezone('Eastern standard',  'EST+5EDT,M3.2.0,M11.1.0', _tzEST_tests),  
                 _Timezone('Eastern (no DST)',  'EST+5'),                 
                 _Timezone('Central standard',  'CST+6CDT,M3.2.0,M11.1.0', _tzCST_tests), 
                 _Timezone('Central (no DST)',  'CST+6'),                 
                 _Timezone('Mountain standard', 'MST+7MDT,M3.2.0,M11.1.0', _tzMST_tests), 
                 _Timezone('Mountain (no DST)', 'MST+7'), 
                 _Timezone('Pacific standard',  'PST+8PDT,M3.2.0,M11.1.0', _tzPST_tests), ) 
    


class UnitedStates():
    """ United States ( http://en.wikipedia.org/wiki/UnitedStates ) """
    
    @staticmethod
    def getCountryCode():
        return 'US'

    @staticmethod
    def getContinent():
        return 'North America'
    
    @staticmethod
    def getCountry():
        return 'United States'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'us', 'en_US.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone('Eastern standard',  'EST+5EDT,M3.2.0,M11.1.0', _tzEST_tests),  
                 _Timezone('Central standard',  'CST+6CDT,M3.2.0,M11.1.0', _tzCST_tests), 
                 _Timezone('Mountain standard', 'MST+7MDT,M3.2.0,M11.1.0', _tzMST_tests), 
                 _Timezone('Mountain (no DST)', 'MST+7'), 
                 _Timezone('Pacific standard',  'PST+8PDT,M3.2.0,M11.1.0', _tzPST_tests),
                 _Timezone('Alaska standard',   'AKST+9AKDT,M3.2.0,M11.1.0', _tzAKST_tests), ) 

    

# South America
#
#

class Brazil():
    """ Brazil ( http://en.wikipedia.org/wiki/Brazil ) """
    
    @staticmethod
    def getCountryCode():
        return 'BR'

    @staticmethod
    def getContinent():
        return 'South America'
    
    @staticmethod
    def getCountry():
        return 'Brazil'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Portuguese', 'pt', 'pt_BR.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        brstTestData = (('2013-02-17T01:55:00', '2013-02-16T23:55:00-0200 BRST' ),
                        ('2013-02-17T02:05:00', '2013-02-16T23:05:00-0300 BRT'  ),
                        ('2013-10-20T02:55:00', '2013-10-19T23:55:00-0300 BRT'  ),                        
                        ('2013-10-20T03:05:00', '2013-10-20T01:05:00-0200 BRST' ),                        
                 )
        brtTestData = ( ('2013-02-17T01:55:00', '2013-02-16T22:55:00-0300 BRT' ),
                        ('2013-02-17T02:05:00', '2013-02-16T23:05:00-0300 BRT' ),
                        ('2013-10-20T02:55:00', '2013-10-19T23:55:00-0300 BRT' ),                        
                        ('2013-10-20T03:05:00', '2013-10-20T00:05:00-0300 BRT' ),                        
                 )
        amstTestData = (('2013-02-17T02:55:00', '2013-02-16T23:55:00-0300 AMST' ),
                        ('2013-02-17T03:05:00', '2013-02-16T23:05:00-0400 AMT'  ),
                        ('2013-10-20T03:55:00', '2013-10-19T23:55:00-0400 AMT'  ),                        
                        ('2013-10-20T04:05:00', '2013-10-20T01:05:00-0300 AMST' ),                        
                 )
        amtTestData = ( ('2013-02-17T02:55:00', '2013-02-16T22:55:00-0400 AMT' ),
                        ('2013-02-17T03:05:00', '2013-02-16T23:05:00-0400 AMT' ),
                        ('2013-10-20T03:55:00', '2013-10-19T23:55:00-0400 AMT' ),                        
                        ('2013-10-20T04:05:00', '2013-10-20T00:05:00-0400 AMT' ),                        
                 )
#        return (_Timezone('Brasília time'          , 'America/Sao_Paulo' , brstTestData ),        
#                _Timezone('Brasília time (no DST)' , 'America/Belem'     , brtTestData ),  
#                _Timezone('Amazon Time'            , 'America/Cuiaba'    , amstTestData ),        
#                _Timezone('Amazon Time (no DST)'   , 'America/Rio_Branco', amtTestData  ), )
        return (_Timezone('Brasília time'          , 'BRT+3BRST,M10.3.0/0,M2.3.0/0' , brstTestData ),        
                _Timezone('Brasília time (no DST)' , 'BRT+3'                        , brtTestData ),  
                _Timezone('Amazon Time'            , 'AMT+4AMST,M10.3.0/0,M2.3.0/0' , amstTestData ),        
                _Timezone('Amazon Time (no DST)'   , 'AMT+4'                        , amtTestData  ), )
  

class Chile():
    """ Chile ( http://en.wikipedia.org/wiki/Chile ) """
    
    @staticmethod
    def getCountryCode():
        return 'CL'

    @staticmethod
    def getContinent():
        return 'South America'
    
    @staticmethod
    def getCountry():
        return 'Chile'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Spanish', 'es', 'es_CL.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        cltTestData = ( ('2013-04-28T02:55:00', '2013-04-27T23:55:00-0300 CLST' ),
                        ('2013-04-28T03:05:00', '2013-04-27T23:05:00-0400 CLT'  ),
                        ('2013-09-08T03:55:00', '2013-09-07T23:55:00-0400 CLT'  ),
                        ('2013-09-08T04:05:00', '2013-09-08T01:05:00-0300 CLST' ),
                        )
        #return ( _Timezone('Chile Standard Time', 'America/Santiago', cltTestData), )
        return ( _Timezone('Chile Standard Time', 'CLT+4CLST,M9.2.0/0,M4.5.0/0', cltTestData), )


class Mexico():
    """ Mexico ( http://en.wikipedia.org/wiki/Mexico ) """
    
    @staticmethod
    def getCountryCode():
        return 'MX'

    @staticmethod
    def getContinent():
        return 'South America'
    
    @staticmethod
    def getCountry():
        return 'Mexico'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Spanish', 'es', 'es_MX.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        # Daylight saving time for Mexico begins the first Sunday of April, and ends last Sunday of October
        tzCST_tests =    ( # 2014
                         ('2014-04-06T07:55:00', '2014-04-06T01:55:00-0600 CST'),
                         ('2014-04-06T08:05:00', '2014-04-06T03:05:00-0500 CDT'),
                         ('2014-04-06T10:00:00', '2014-04-06T05:00:00-0500 CDT'),
                         ('2014-10-26T06:55:00', '2014-10-26T01:55:00-0500 CDT'),
                         ('2014-10-26T07:05:00', '2014-10-26T01:05:00-0600 CST'),                    
                         ('2014-10-26T10:00:00', '2014-10-26T04:00:00-0600 CST'),                    
                         # 2015
                         ('2015-04-05T07:55:00', '2015-04-05T01:55:00-0600 CST'),
                         ('2015-04-05T08:05:00', '2015-04-05T03:05:00-0500 CDT'),
                         ('2015-04-05T10:00:00', '2015-04-05T05:00:00-0500 CDT'),
                         ('2015-10-25T06:55:00', '2015-10-25T01:55:00-0500 CDT'),
                         ('2015-10-25T07:05:00', '2015-10-25T01:05:00-0600 CST'),                    
                         ('2015-10-25T10:00:00', '2015-10-25T04:00:00-0600 CST'),                    
                         )
        tzMST_tests  =   ( # 2014
                         ('2014-04-06T08:55:00', '2014-04-06T01:55:00-0700 MST'),
                         ('2014-04-06T09:05:00', '2014-04-06T03:05:00-0600 MDT'),
                         ('2014-04-06T12:00:00', '2014-04-06T06:00:00-0600 MDT'),
                         ('2014-10-26T07:55:00', '2014-10-26T01:55:00-0600 MDT'),
                         ('2014-10-26T08:05:00', '2014-10-26T01:05:00-0700 MST'),                    
                         ('2014-10-26T12:00:00', '2014-10-26T05:00:00-0700 MST'),                    
                         # 2015                             
                         ('2015-04-05T08:55:00', '2015-04-05T01:55:00-0700 MST'),
                         ('2015-04-05T09:05:00', '2015-04-05T03:05:00-0600 MDT'),
                         ('2015-04-05T12:00:00', '2015-04-05T06:00:00-0600 MDT'),
                         ('2015-10-25T07:55:00', '2015-10-25T01:55:00-0600 MDT'),
                         ('2015-10-25T08:05:00', '2015-10-25T01:05:00-0700 MST'),                    
                         ('2015-10-25T12:00:00', '2015-10-25T05:00:00-0700 MST'),                    
                         )
        tzPST_tests =    ( # 2014
                         ('2014-04-06T09:55:00', '2014-04-06T01:55:00-0800 PST'),
                         ('2014-04-06T10:05:00', '2014-04-06T03:05:00-0700 PDT'),
                         ('2014-04-06T14:00:00', '2014-04-06T07:00:00-0700 PDT'),
                         ('2014-10-26T08:55:00', '2014-10-26T01:55:00-0700 PDT'),
                         ('2014-10-26T09:05:00', '2014-10-26T01:05:00-0800 PST'),                    
                         ('2014-10-26T14:00:00', '2014-10-26T06:00:00-0800 PST'),                    
                         # 2015                             
                         ('2015-04-05T09:55:00', '2015-04-05T01:55:00-0800 PST'),
                         ('2015-04-05T10:05:00', '2015-04-05T03:05:00-0700 PDT'),
                         ('2015-04-05T14:00:00', '2015-04-05T07:00:00-0700 PDT'),
                         ('2015-10-25T08:55:00', '2015-10-25T01:55:00-0700 PDT'),
                         ('2015-10-25T09:05:00', '2015-10-25T01:05:00-0800 PST'),                    
                         ('2015-10-25T14:00:00', '2015-10-25T06:00:00-0800 PST'),                    
                         )       

        return ( _Timezone('Central Zone',   'CST+6CDT,M4.1.0,M10.5.0', tzCST_tests), 
                 _Timezone('Pacific Zone',   'MST+7MDT,M4.1.0,M10.5.0', tzMST_tests), 
                 _Timezone('Northwest Zone', 'PST+8PDT,M4.1.0,M10.5.0', tzPST_tests), ) 


# Asia
#
#

class China():
    """ China ( http://en.wikipedia.org/wiki/China ) """
    
    @staticmethod
    def getCountryCode():
        return 'CN'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'China'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Chinese', 'zh', 'zh_CN.UTF-8'), ) 
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone('China Standard Time', 'CST-8"'), )



class India():
    """ India ( http://en.wikipedia.org/wiki/India ) """
    
    @staticmethod
    def getCountryCode():
        return 'IN'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'India'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'en', 'en_IN.UTF-8'), ) 
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone('Indian Standard Time', 'IST-5:30'), )



class HongKong():
    """ HongKong ( http://en.wikipedia.org/wiki/HongKong ) """
    
    @staticmethod
    def getCountryCode():
        return 'HK'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'Hong Kong'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Chinese', 'zh', 'zh_HK.UTF-8'), 
                 _Language('English', 'en', 'en_HK.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'Hong Kong Time', 'HKT-8'), )


 
class Japan():
    """ Japan ( http://en.wikipedia.org/wiki/Japan ) """
    
    @staticmethod
    def getCountryCode():
        return 'JP'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'Japan'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Japanese', 'ja', 'ja_JP.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'JST', 'JST-9' ), )    



class Singapore():
    """ Singapore ( http://en.wikipedia.org/wiki/Singapore ) """
    
    @staticmethod
    def getCountryCode():
        return 'SG'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'Singapore'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Chinese', 'zh', 'zh_SG.UTF-8'), 
                 _Language('English', 'en', 'en_SG.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'Singapore Standard Time', 'SST-8'), )    



class SouthKorea():
    """ South Korea ( http://en.wikipedia.org/wiki/South_Korea ) """
    
    @staticmethod
    def getCountryCode():
        return 'KR'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'South Korea'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Korean', 'ko', 'ko_KR.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'Korea Standard Time', 'KST-9'), )    


class Taiwan():
    """ Taiwan ( https://en.wikipedia.org/wiki/Taiwan ) """
    
    @staticmethod
    def getCountryCode():
        return 'TW'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'Taiwan'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Chinese-traditional', 'zh_TW', 'zh_TW.UTF-8'), ) 
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone('National Standard Time', 'CST-8"'), )



class Malaysia():
    """ Malaysia ( http://en.wikipedia.org/wiki/Malaysia ) """
    
    @staticmethod
    def getCountryCode():
        return 'MY'

    @staticmethod
    def getContinent():
        return 'Asia'
    
    @staticmethod
    def getCountry():
        return 'Malaysia'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Malaysian', 'ms', 'ms_MY.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'Malaysia Standard Time', 'MST-8'), )    


# Africa

class Egypt():
    """ Egypt ( http://en.wikipedia.org/wiki/Egypt ) """
    
    @staticmethod
    def getCountryCode():
        return 'EG'

    @staticmethod
    def getContinent():
        return 'Africa'
    
    @staticmethod
    def getCountry():
        return 'Egypt'
    
    @staticmethod
    def getLanguages():
        return ( _Language('Arabic', 'ar', 'ar_EG.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'Eastern European Time', 'EET-2'), )    




class SouthAfrica():
    """ South Africa ( http://en.wikipedia.org/wiki/South_africa ) """
    
    @staticmethod
    def getCountryCode():
        return 'ZA'

    @staticmethod
    def getContinent():
        return 'Africa'
    
    @staticmethod
    def getCountry():
        return 'South Africa'
    
    @staticmethod
    def getLanguages():
        return ( _Language('English', 'en', 'en_ZA.UTF-8'), )
        
    @staticmethod    
    def getTimezones():
        return ( _Timezone( 'South African Standard Time', 'SAST-2'), )    



# -----------------------------------------------------------------------------
if __name__ == '__main__':
    
    for c in sorted(getAll(), key=lambda x : x.getCountry()):
        langText = ', '.join([ l.getLocale() for l in c.getLanguages()])
        tzText   = ', '.join([ tz.getName() for tz in c.getTimezones() ])
        print '%-15s [%s] [%s] [%s]' % (c.getCountry(), c.getCountryCode(), langText, tzText)
  
    

